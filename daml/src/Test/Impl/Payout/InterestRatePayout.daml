-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Test.Impl.Payout.InterestRatePayout where

import DA.Assert
import DA.Date as D
import DA.List
import DA.Optional
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout
import Org.Isda.Cdm.EventSpecificationModule.Impl.Event
import Org.Isda.Cdm.EventSpecificationModule.Impl.Utils
import Org.Isda.Cdm.EventSpecificationModule.Types.All hiding (length)
import Test.Examples
import Test.ReferenceData()

genPayment : Decimal -> Date -> Date -> TransferPrimitive
genPayment amount unadjustedDate adjustedDate =
  TransferPrimitive {
    cashTransfer =
      [ CashTransferComponent {
          amount =
            Money {
              id = None,
              amount = amount,
              currency = fieldWithEmptyMeta "USD"
            },
          breakdown = [],
          payerReceiver =
            PayerReceiver {
              payerAccountReference = None,
              payerPartyReference = referenceWithEmptyMeta "Party1",
              receiverAccountReference = None,
              receiverPartyReference = referenceWithEmptyMeta "Party2"
            },
          cashflowType = Some CashflowTypeEnum_Interest,
          identifier = None,
          transferCalculation = None
        }
      ],
    commodityTransfer = [],
    securityTransfer = [],
    settlementDate =
      AdjustableOrAdjustedOrRelativeDate {
        id = None,
        adjustedDate = Some $ fieldWithEmptyMeta adjustedDate,
        dateAdjustments = Some
          BusinessDayAdjustments {
            id = None,
            businessCenters = Some
              BusinessCenters {
                id = None,
                businessCenter = [fieldWithEmptyMeta BusinessCenterEnum_USNY],
                businessCentersReference = None
              },
            businessDayConvention = BusinessDayConventionEnum_MODFOLLOWING
          },
        relativeDate = None,
        unadjustedDate = Some $ unadjustedDate
      },
    settlementReference = None,
    status = None,
    settlementType = None,
    identifier = None,
    rosettaKey = ""
  }

testFloating = scenario do
  let irp = irpFloating3M { rosettaKey = "Test" } : InterestRatePayout
  let payment1 = genPayment 2916.666669 (D.date 2018 Dec 5) (D.date 2018 Dec 5)
  let reset2 = ResetPrimitive { date = D.date 2018 Nov 30, resetValue = 0.03, cashflow = None }

  let expectedED = [D.date 2018 Nov 30, D.date 2018 Dec 5, D.date 2019 Feb 28, D.date 2019 Mar 5, D.date 2019 May 30, D.date 2019 Jun 4, D.date 2019 Aug 30, D.date 2019 Sep 4, D.date 2019 Nov 29, D.date 2019 Dec 4, D.date 2019 Dec 20]
  let expectedQ  = ["Reset", "CashTransfer", "Reset", "CashTransfer", "Reset", "CashTransfer", "Reset", "CashTransfer", "Reset", "CashTransfer", "CashTransfer"]
  let expectedL  = replicate 11 emptyLineage { interestRatePayoutReference = [referenceWithEmptyMeta "Test"] }
  let expectedP  =
        [ emptyPrimitiveEvent { reset = [reset2] }
        , emptyPrimitiveEvent { transfer = [payment1] } : PrimitiveEvent
        ] ++ replicate 9 emptyPrimitiveEvent

  res <- buildEvents None None [] irp

  mapOptional (\r -> r.effectiveDate) res   === expectedED
  mapOptional (\r -> r.eventQualifier) res  === expectedQ
  mapOptional (\r -> r.lineage) res         === expectedL
  map (\p -> p.primitive) res               === expectedP

  -- Include reset event
  let resetEvent2 = (head res : Event) { rosettaKey = "Test_0" }
  let payment2 = genPayment 12222.22222 (D.date 2019 Mar 5) (D.date 2019 Mar 5)

  let expectedL =
        [ emptyLineage { interestRatePayoutReference = [referenceWithEmptyMeta "Test"] }
        , emptyLineage { interestRatePayoutReference = [referenceWithEmptyMeta "Test"] }
        , emptyLineage { interestRatePayoutReference = [referenceWithEmptyMeta "Test"], eventReference = [referenceWithEmptyMeta "Test_0"] }
        ] ++ replicate 7 emptyLineage { interestRatePayoutReference = [referenceWithEmptyMeta "Test"] }
  let expectedP =
        [ emptyPrimitiveEvent { transfer =  [payment1] } : PrimitiveEvent
        , emptyPrimitiveEvent
        , emptyPrimitiveEvent { transfer =  [payment2] } : PrimitiveEvent
        ] ++ replicate 7 emptyPrimitiveEvent

  res <- buildEvents None None [resetEvent2] irp

  mapOptional (\r -> r.effectiveDate) res   === tail expectedED
  mapOptional (\r -> r.eventQualifier) res  === tail expectedQ
  mapOptional (\r -> r.lineage) res         === expectedL
  map (\p -> p.primitive) res               === expectedP

  -- Include payment event
  let paymentEvent1 = head res

  res <- buildEvents None None [resetEvent2, paymentEvent1] irp

  mapOptional (\r -> r.effectiveDate) res   === drop 2 expectedED
  mapOptional (\r -> r.eventQualifier) res  === drop 2 expectedQ
  mapOptional (\r -> r.lineage) res         === tail expectedL
  map (\p -> p.primitive) res               === tail expectedP

testFixed = scenario do
  let expectedP =
        [ emptyPrimitiveEvent { transfer = [genPayment 833.333334 (D.date 2018 Dec 5) (D.date 2018 Dec 5)] } : PrimitiveEvent
        , emptyPrimitiveEvent { transfer = [genPayment 4888.888888 (D.date 2019 Mar 5) (D.date 2019 Mar 5)] } : PrimitiveEvent
        , emptyPrimitiveEvent { transfer = [genPayment 5111.111112 (D.date 2019 Jun 4) (D.date 2019 Jun 4)] } : PrimitiveEvent
        , emptyPrimitiveEvent { transfer = [genPayment 5000.0 (D.date 2019 Sep 4) (D.date 2019 Sep 4)] } : PrimitiveEvent
        , emptyPrimitiveEvent { transfer = [genPayment 4944.444444 (D.date 2019 Dec 4) (D.date 2019 Dec 4)] } : PrimitiveEvent
        , emptyPrimitiveEvent { transfer = [genPayment 944.444444 (D.date 2019 Dec 20) (D.date 2019 Dec 20)] } : PrimitiveEvent
        ]

  res <- buildEvents None None [] irpFixed3M

  map (\p -> p.primitive) res === expectedP

main = scenario do
  testFloating
  testFixed
