-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Org.Isda.Cdm.EventSpecificationModule.Types.EventSpec where

import Org.Isda.Cdm.Classes
import Org.Isda.Cdm.Enums
import Prelude hiding (Party)

-- | The base event used to build a valid event.
data BaseEvent = BaseEvent with
    account : [Account]
        -- ^ Optional account information that could be associated
        --   to the event.
    action : ActionEnum
        -- ^ Specifies whether the event is a new, a correction or
        --   a cancellation.
    effectiveDate : Optional Date
        -- ^ The date on which the event contractually takes
        --   effect, when different from the event date.
    eventDate : Date
        -- ^ The date on which the event is taking place. This is
        --   the equivalent of the trade date in the case of an
        --   execution or a contract.
    eventIdentifier : [Identifier]
        -- ^ The identifier(s) that uniquely identify a lifecycle
        --   event. The unbounded cardinality is meant to provide
        --   the ability to associate identifiers that are issued
        --   by distinct parties. As an example, each of the
        --   parties to the event may choose to associate their
        --   own identifiers to the event.
    id : Optional Text
    messageInformation : Optional MessageInformation
    transfer : [TransferPrimitive]
    timestamp : [EventTimestamp]
        -- ^ The set of timestamp(s) associated with the event as
        --   a collection of [dateTime, qualifier].
      deriving (Eq, Ord, Show)

-- | The spec for derived events (e.g. interest rate payments, resets, etc.)
data DerivedSpec = DerivedSpec
  with
    fromDate    : Optional Date
      -- ^ Events starting from this date will be included (leave empty to include all events).
    toDate      : Optional Date
      -- ^ Events until this date will be included (leave empty to include all events).
    pastEvents  : [Event]
      -- ^ The list of events that were already applied to the contract. This is required to e.g. imply which
      -- payments were already made or get the reset value for a certain period.
    contract    : Contract
      -- The contract derived events are calculated for.
  deriving (Eq, Show)

-- | The spec for a new trade event.
data NewTradeSpec = NewTradeSpec
  with
    base      : BaseEvent
      -- ^ The base event used to build the event.
    after : PostInceptionState
      -- ^ The post inception state
  deriving (Eq, Show)

-- | The spec for a termination event.
data TerminationSpec = TerminationSpec
  with
    base      : BaseEvent
      -- ^ The base event used to build the event.
    contract  : Contract
      -- ^ The contract the termination is applied to.
  deriving (Eq, Show)

-- | The spec for a partial termination event
data PartialTerminationSpec = PartialTerminationSpec
  with
    base      : BaseEvent
      -- ^ The base event used to build the event.
    contract  : Contract
      -- ^ The contract the termination is applied to.
    change  : [ContractualQuantity]
      -- ^ The change in quantity applied in the partial termination.
  deriving (Eq, Show)

-- | The spec for a novation event.
data NovationSpec = NovationSpec
  with
    base        : BaseEvent
      -- ^ The base event used to build the event.
    contract    : Contract
      -- ^ The contract the novation is applied to.
    contractNew : Contract
      -- ^ The contract that results from the novation.
  deriving (Eq, Show)

-- | The spec for a partial novation event.
data PartialNovationSpec = PartialNovationSpec
  with
    base        : BaseEvent
      -- ^ The base event used to build the event.
    contract    : Contract
      -- ^ The contract the partial novation is applied to.
    change      : [ContractualQuantity]
      -- ^ The change in quantity applied in the partial novation.
    contractNew : Contract
      -- ^ The contract that results from the novation.
  deriving (Eq, Show)
