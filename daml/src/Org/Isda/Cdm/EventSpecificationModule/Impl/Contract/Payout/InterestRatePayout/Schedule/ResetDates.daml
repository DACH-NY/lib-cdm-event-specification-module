-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout.Schedule.ResetDates where

import DA.Optional
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout.Schedule.CalculationPeriodDates
import Org.Isda.Cdm.EventSpecificationModule.Impl.Date.BusinessDayAdjustments
import Org.Isda.Cdm.EventSpecificationModule.Impl.Date.Offset
import Org.Isda.Cdm.EventSpecificationModule.Impl.Utils
import Org.Isda.Cdm.EventSpecificationModule.Types.All

-- | Check ResetDates for non-supported features
checkResetDates : CalculationPeriodDates -> ResetDates -> ResetDates
checkResetDates _ rds | isSome rds.initialFixingDate = throwNotSupportedError "ResetDates.initialFixingDate"
checkResetDates _ rds | isSome rds.finalFixingDate = throwNotSupportedError "ResetDates.finalFixingDate"
checkResetDates _ rds | isSome rds.rateCutOffDaysOffset = throwNotSupportedError "ResetDates.rateCutOffDaysOffset"
checkResetDates cpds rds | checkFrequency cpds rds = throwNotSupportedError "resetFrequency not equal to calculationPeriodFrequency"
  where
    checkFrequency : CalculationPeriodDates -> ResetDates -> Bool
    checkFrequency cpds rds =
      let rFrequency = get "resetFrequency" rds.resetFrequency
          cpFrequency = get "calculationPeriodFrequency" cpds.calculationPeriodFrequency
      in (rFrequency.period /= cpFrequency.period) && (rFrequency.periodMultiplier /= cpFrequency.periodMultiplier)
checkResetDates _ rds = rds

-- | Generate CalculationPeriods including resets from CalculationPeriodDates and ResetDates
generateResetPeriods : (Fetch f) => CalculationPeriodDates -> Optional ResetDates -> f [CalculationPeriod]
generateResetPeriods cpds None = generateCalculationPeriods cpds
generateResetPeriods cpds (Some (checkResetDates cpds -> rds)) = do
  -- Roll out calculation periods and unadjusted reset dates
  cps <- generateCalculationPeriods cpds
  let rpDatesV = map generateResetPeriodDates cps

  -- Set reset and fixing dates
  let adj = get "resetDatesAdjustments" rds.resetDatesAdjustments
  let fixingOffset = get "fixingDates" rds.fixingDates
  let resetRelativeTo = fromOptional ResetRelativeToEnum_CalculationPeriodStartDate rds.resetRelativeTo
  mapA (setResetDates resetRelativeTo fixingOffset adj) $ zip cps rpDatesV

  where
    -- multiple resets per period not supported yet
    generateResetPeriodDates : CalculationPeriod -> [(Date, Date)]
    generateResetPeriodDates cp = [(get "adjustedStartDate" cp.adjustedStartDate, get "adjustedEndDate" cp.adjustedEndDate)]

    setResetDates :
      (Fetch f)
      => ResetRelativeToEnum
      -> RelativeDateOffset
      -> BusinessDayAdjustments
      -> (CalculationPeriod, [(Date, Date)])
      -> f CalculationPeriod
    setResetDates resetRelativeTo fixingOffset adj (cp, rpDates) = do
      resetDates <-
        case resetRelativeTo of
          ResetRelativeToEnum_CalculationPeriodStartDate -> mapA (adjustDate adj . fst) rpDates
          ResetRelativeToEnum_CalculationPeriodEndDate   -> mapA (adjustDate adj . snd) rpDates

      ros <- mapA generateRateObservation resetDates
      return $ cp { floatingRateDefinition = Some FloatingRateDefinition
                                                    { calculatedRate = None
                                                    , capRate = []
                                                    , floatingRateMultiplier = None
                                                    , floorRate = []
                                                    , rateObservation = ros
                                                    , spread = None
                                                    }}

      where
        generateRateObservation : (Fetch f) => Date -> f RateObservation
        generateRateObservation rd = do
          fixingDate <- applyRelativeDateOffset fixingOffset rd
          return RateObservation
                    { id = None
                    , adjustedFixingDate = Some fixingDate
                    , resetDate = Some rd
                    , forecastRate = None
                    , observationWeight = Some 0
                    , observedRate = None
                    , rateReference = None
                    , treatedForecastRate = None
                    , treatedRate = None
                    }
