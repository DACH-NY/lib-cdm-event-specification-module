-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout
  ( buildEvents
  ) where

import DA.List
import DA.Optional
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.ContractualQuantity
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout.FloatingRate as FR
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout.PaymentCalculationPeriod as PCP
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout.Schedule.PaymentDates
import Org.Isda.Cdm.EventSpecificationModule.Impl.Date.DayCountFraction
import Org.Isda.Cdm.EventSpecificationModule.Impl.Event
import Org.Isda.Cdm.EventSpecificationModule.Impl.Utils
import Org.Isda.Cdm.EventSpecificationModule.Types.All hiding (length)

-- | Check InterestRatePayout for non-supported features
checkInterestRatePayout : InterestRatePayout -> InterestRatePayout
checkInterestRatePayout irp | isSome irp.cashflowRepresentation = throwNotSupportedError "InterestRatePayout.cashflowRepresentation"
checkInterestRatePayout irp | isSome irp.stubPeriod = throwNotSupportedError "InterestRatePayout.stubPeriod"
checkInterestRatePayout irp | isSome irp.crossCurrencyTerms = throwNotSupportedError "InterestRatePayout.crossCurrencyTerms"
checkInterestRatePayout irp | isSome irp.paymentDate = throwNotSupportedError "InterestRatePayout.paymentDate"
checkInterestRatePayout irp | isSome irp.paymentDelay = throwNotSupportedError "InterestRatePayout.paymentDelay"
checkInterestRatePayout irp | isSome irp.discountingMethod = throwNotSupportedError "InterestRatePayout.discountingMethod"
checkInterestRatePayout irp | isSome irp.compoundingMethod = throwNotSupportedError "InterestRatePayout.compoundingMethod"
checkInterestRatePayout irp | isSome irp.rateSpecification.inflationRate = throwNotSupportedError "InterestRatePayout.rateSpecification.inflationRate"
checkInterestRatePayout irp | not $ null $optional [] (\fr -> fr.step) irp.rateSpecification.fixedRate = throwNotSupportedError "InterestRatePayout.rateSpecification.inflationRate"
checkInterestRatePayout irp | isSome resetReference && resetReference /= irp.calculationPeriodDates.id = throwNotSupportedError "cross referenced schedules"
  where resetReference = irp.resetDates >>= (\rd -> rd.calculationPeriodDatesReference) >>= (\ref -> ref.reference)
checkInterestRatePayout irp = irp

-- | Build all reset and cash transfer (payment) primitive events that haven't been processed yet
-- (returns empty primitive if the event is not fully known yet, e.g. floating coupon)
buildEvents : (Fetch f) => Optional Date -> Optional Date -> [Event] -> InterestRatePayout -> f [Event]
buildEvents fromDate toDate pastEvents (checkInterestRatePayout -> irp) = do
  -- Roll out schedule
  pcps <- generatePaymentCalculationPeriods irp.calculationPeriodDates irp.resetDates irp.paymentDates

   -- Get existing reset events
  let firstPcp = getFirst "PaymentCalculationPeriod" pcps
  let pastResetEvents = filter (\e -> e.eventQualifier == Some "Reset") pastEvents
  let existingResets = getExistingResets firstPcp pastResetEvents irp

  -- Build new payment events
  let pastPaymentEvents = filter (\e -> e.eventQualifier == Some "CashTransfer") pastEvents
  let pcpsNotPaid = drop (length pastPaymentEvents) pcps
  let pcpsFullWithLineage = map (populatePCP existingResets irp) pcpsNotPaid

  let adj = irp.paymentDates >>= (\p -> p.paymentDatesAdjustments)
  let pr = get "payerReceiver" irp.payerReceiver
  let ccy = getCurrency $ get "quantity" irp.quantity

  let paymentEvents = mapOptional (\(pcp, lineage) -> buildPaymentEvent fromDate toDate lineage ccy adj pr pcp) pcpsFullWithLineage

  -- Build new reset events
  newResetEvents <- case irp.rateSpecification.floatingRate of
                          None    -> return []
                          Some fr -> do
                            let lineage = emptyLineage { interestRatePayoutReference = [referenceWithEmptyMeta irp.rosettaKey] }
                            let resets = (map snd existingResets)
                            concatMapC (PCP.buildResetEvents fromDate toDate lineage resets fr) pcpsNotPaid

  return $ sortOn (\e -> e.eventDate) $ newResetEvents ++ paymentEvents

-- | Get all known resets (including e.g. the initial reset)
getExistingResets : PaymentCalculationPeriod -> [Event] -> InterestRatePayout -> [(Optional Text, ResetPrimitive)]
getExistingResets firstPcp resetEvents irp =
  case irp.rateSpecification.floatingRate of
    Some fr ->
      let existingResetEvents = map (getReset irp.rosettaKey) resetEvents
      in case fr.initialRate of
          Some initialRate ->
            let cp = getFirst "calculationPeriod" firstPcp.calculationPeriod
                frDef = get "floatingRateDefinition" cp.floatingRateDefinition
                initialReset = (None, getInitialReset initialRate frDef)
            in (initialReset :: existingResetEvents)
          None -> existingResetEvents
    None -> []

  where
    getReset : Text -> Event -> (Optional Text, ResetPrimitive)
    getReset rosettaKey event =
      let index = fromSomeTry "no reset event found" $ findIndex (== rosettaKey) $ getInterestRatePayoutReferences event
      in (Some event.rosettaKey, nThTry "reset value not available" index event.primitive.reset)

-- | Populate PaymentCalculationPeriod with payment related information (i.e. DayCountFraction, Quantity, RateSpecification)
populatePCP : [(Optional Text, ResetPrimitive)] -> InterestRatePayout -> PaymentCalculationPeriod -> (PaymentCalculationPeriod, Lineage)
populatePCP existingResets irp pcp =
  let (resetReferences, cpsFull) = unzip $ map (setInterestRate . setDayCountFraction . setQuantity) pcp.calculationPeriod
      lineage = emptyLineage
                  { interestRatePayoutReference = [referenceWithEmptyMeta irp.rosettaKey]
                  , eventReference = map referenceWithEmptyMeta $ concat resetReferences
                  }
      pcpFull = pcp { calculationPeriod = cpsFull }
  in (pcpFull, lineage)
  where
    setDayCountFraction : CalculationPeriod -> CalculationPeriod
    setDayCountFraction cp =
      let startDate = get "calcPeriod.adjustedStartDate" cp.adjustedStartDate
          endDate = get "calcPeriod.adjustedEndDate" cp.adjustedEndDate
          dcfEnum = get "dayCountFraction" irp.dayCountFraction
          dayCountFraction = calcDayCountFraction dcfEnum.value startDate endDate
      in cp { dayCountYearFraction = Some dayCountFraction }

    setQuantity : CalculationPeriod -> CalculationPeriod
    setQuantity cp =
      let quantity = get "quantity" irp.quantity
          startDate = get "adjustedStartDate" cp.adjustedStartDate
          (notionalAmount, fxLinkedNotionalAmount) = calcQuantity startDate quantity
      in cp { notionalAmount, fxLinkedNotionalAmount }

    setInterestRate : CalculationPeriod -> ([Text], CalculationPeriod)
    setInterestRate cp
      | Some fixedRate <- irp.rateSpecification.fixedRate =
          ([], cp { fixedRate = Some fixedRate.initialValue })

      | Some floatingRate <- irp.rateSpecification.floatingRate =
          let frDef = get "floatingRateDefinition" cp.floatingRateDefinition
              frdNew = FR.calcFloatingRate existingResets floatingRate frDef
          in (fst frdNew, cp { floatingRateDefinition = Some (snd frdNew) })

      | otherwise = error "expecting exactly one 'rateSpecification'"
