-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout
  ( checkPayout
  , buildEvents
  , defaultCdsIrp
  ) where

import DA.List
import DA.Optional
import qualified Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.Cashflow as CF
import qualified Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout.InterestRatePayout as IRP
import Org.Isda.Cdm.EventSpecificationModule.Impl.Date.AdjustableOrRelativeDate
import Org.Isda.Cdm.EventSpecificationModule.Impl.Date.RollConvention
import Org.Isda.Cdm.EventSpecificationModule.Impl.Event
import Org.Isda.Cdm.EventSpecificationModule.Impl.Utils
import Org.Isda.Cdm.EventSpecificationModule.Types.All hiding (length)

-- | Check Payout for non-supported features
checkPayout : Payout -> Payout
checkPayout payout | not $ null payout.optionPayout = throwNotSupportedError "Payout.optionPayout"
checkPayout payout | not $ null payout.equityPayout = throwNotSupportedError "Payout.equityPayout"
checkPayout payout | not $ null payout.forwardPayout = throwNotSupportedError "Payout.forwardPayout"
checkPayout payout = payout

-- | Build all reset and cash transfer (payment) events that haven't been processed yet
-- (returns empty primitive if the event is not fully known yet, e.g. floating coupon without reset event)
buildEvents : (Fetch f) => Optional Date -> Optional Date -> [Event] -> Payout -> f [Event]
buildEvents fromDate toDate pastEvents (checkPayout -> payout) = do
  -- build events
  let irpPastEvents = filter (\e -> e.eventQualifier == Some "CashTransfer" || e.eventQualifier == Some "Reset") pastEvents
  irpEvents <- buildIrpEvents fromDate toDate irpPastEvents payout

  let cfPastEvents = filter (\e -> e.eventQualifier == Some "CashTransfer") pastEvents
  cfEvents  <- buildCfEvents fromDate toDate cfPastEvents payout

  -- merge events happening on the same date having the same event qualifier
  return $ merge (irpEvents ++ cfEvents)

  where
    merge : [Event] -> [Event]
    merge events =
      let sorted = sortOn (\e -> e.eventDate) events
          grouped = groupOn (\e -> (e.eventDate, e.effectiveDate, e.eventQualifier)) sorted
      in map mergeImpl grouped

      where
        mergeImpl : [Event] -> Event
        mergeImpl events
          | any (\e -> e.primitive == emptyPrimitiveEvent) events =
              (head events)
                { lineage   = Some $ foldr1 mergeLineages $ mapOptional (\e -> e.lineage) events
                , primitive = emptyPrimitiveEvent
                }
          | otherwise =
              (head events)
                { lineage   = Some $ foldr1 mergeLineages $ mapOptional (\e -> e.lineage) events
                , primitive = foldr1 mergePrimitives $ map (\e -> e.primitive) events
                }

-- | Build interest rate payout events
buildIrpEvents : (Fetch f) => Optional Date -> Optional Date -> [Event] -> Payout -> f [Event]
buildIrpEvents fromDate toDate irpPastEvents payout = concatMapC buildIrpLegEvents payout.interestRatePayout
  where
    buildIrpLegEvents : (Fetch f) => InterestRatePayout -> f [Event]
    buildIrpLegEvents irp = do
      let irpLegPastEvents = filter (\e -> irp.rosettaKey `elem` getInterestRatePayoutReferences e) irpPastEvents
      let irpDefaulted = case payout.creditDefaultPayout of
                                Some cdp -> defaultCdsIrp cdp irp
                                None -> irp
      IRP.buildEvents fromDate toDate irpLegPastEvents irpDefaulted

-- | Build cashflow events
buildCfEvents : (Fetch f) => Optional Date -> Optional Date -> [Event] -> Payout -> f [Event]
buildCfEvents fromDate toDate pastCfEvents payout = do
  let cashflowReferences = concatMap getCashflowReferences pastCfEvents
  let cfNotPaid = filter (\cf -> not $ cf.rosettaKey `elem` cashflowReferences) payout.cashflow
  mapOptionalC (\cf -> CF.buildEvent fromDate toDate $ defaultCashflowDate payout cf) cfNotPaid

-- | Default InterestRatePayout which is part part of a credit default swap
defaultCdsIrp : CreditDefaultPayout -> InterestRatePayout -> InterestRatePayout
defaultCdsIrp cdp irp =
  let calcPeriodDates = irp.calculationPeriodDates

      -- Default values (TODO: look up in ReferenceData instead of defaulting)
      stubPeriodTypeNew = fromOptional defaultStubPeriodType calcPeriodDates.stubPeriodType
      adjNew = fromOptional (fromOptional defaultAdj cdp.generalTerms.dateAdjustments) calcPeriodDates.calculationPeriodDatesAdjustments

      -- Determine rollConvention
      terminationDate = get "terminationDate" calcPeriodDates.terminationDate
      uTerminationDate = getUnadjustedDate terminationDate
      rollConvention = implyRollConvention True uTerminationDate
      frequencyNew = fromOptional (defaultCalculationPeriodFrequency rollConvention) calcPeriodDates.calculationPeriodFrequency

      calcPeriodDatesNew = calcPeriodDates
                              { calculationPeriodFrequency = Some frequencyNew
                              , stubPeriodType = Some stubPeriodTypeNew
                              , calculationPeriodDatesAdjustments = Some adjNew
                              }
  in irp { calculationPeriodDates = calcPeriodDatesNew }

  where
    defaultCalculationPeriodFrequency rollConvention = CalculationPeriodFrequency
                                                        { id = None
                                                        , rollConvention = rollConvention
                                                        , period = PeriodExtendedEnum_M
                                                        , periodMultiplier = 3
                                                        }
    defaultAdj = BusinessDayAdjustments
                  { id = None
                  , businessCenters = None
                  , businessDayConvention = BusinessDayConventionEnum_NONE
                  }

    defaultStubPeriodType = StubPeriodTypeEnum_ShortInitial

-- Set cashflow date to effective date if not present
defaultCashflowDate : Payout -> Cashflow -> Cashflow
defaultCashflowDate payout cashflow
  | Some _ <- cashflow.cashflowDate = cashflow
  | otherwise =
      let irp = getOne "interestRatePayout" payout.interestRatePayout
          effectiveDate = get "effectiveDate" irp.calculationPeriodDates.effectiveDate
          cashflowDate = toAdjustableOrAdjustedOrRelativeDate effectiveDate
      in cashflow { cashflowDate = Some cashflowDate }
