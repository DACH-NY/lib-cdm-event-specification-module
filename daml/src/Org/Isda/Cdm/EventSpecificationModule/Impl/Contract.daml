-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Org.Isda.Cdm.EventSpecificationModule.Impl.Contract where

import DA.List as L
import DA.Optional
import Org.Isda.Cdm.EventSpecificationModule.Impl.Contract.Payout as Payout
import Org.Isda.Cdm.EventSpecificationModule.Impl.Utils
import Org.Isda.Cdm.EventSpecificationModule.Types.All
import Prelude hiding (Party)

-- | Check Contract for non-supported features
checkContract : Contract -> Contract
checkContract contract | isSome contract.contractualProduct.economicTerms.earlyTerminationProvision = throwNotSupportedError "Contract.contractualProduct.economicTerms.earlyTerminationProvision"
checkContract contract | isSome contract.contractualProduct.economicTerms.cancelableProvision = throwNotSupportedError "Contract.contractualProduct.economicTerms.cancelableProvision"
checkContract contract | isSome contract.contractualProduct.economicTerms.extendibleProvision = throwNotSupportedError "Contract.contractualProduct.economicTerms.extendibleProvision"
checkContract contract | isSome contract.contractualProduct.economicTerms.extraordinaryEvents = throwNotSupportedError "Contract.contractualProduct.economicTerms.extraordinaryEvents"
checkContract contract = contract

-- | Build all reset and cash transfer (payment) events that haven't been processed yet
-- (returns empty primitive if the event is not fully known yet, e.g. floating coupon without reset event)
buildEvents : (Fetch f) => Optional Date -> Optional Date -> [Event] -> Contract -> f [Event]
buildEvents fromDate toDate pastEvents (checkContract -> contract) = do
  let payout = contract.contractualProduct.economicTerms.payout
  Payout.buildEvents fromDate toDate pastEvents payout

-- | Get list of ContractualQuantity(s) from Contract
getContractualQuantity :  Contract -> [ContractualQuantity]
getContractualQuantity contract =
  let payout = contract.contractualProduct.economicTerms.payout
  in case payout.creditDefaultPayout of
      Some cdp ->
        let cdpQuantities = map getCdpQuantity cdp.protectionTerms
            irpQuantities = map (fromOptional cdpQuantity . getIrpQuantity) payout.interestRatePayout

            cdpQuantity = getFirst "protectionTerms" cdpQuantities
        in if any (/= cdpQuantity) cdpQuantities || any (/= cdpQuantity) irpQuantities
            then throwNotSupportedError "non-unique quantity"
            else [cdpQuantity]

      None ->
        let irpQuantities = mapOptional getIrpQuantity payout.interestRatePayout
            irpQuantity = getFirst "interestRatePayout" irpQuantities
        in if any (/= irpQuantity) irpQuantities
            then throwNotSupportedError "non-unique quantity"
            else [irpQuantity]

  where
    getIrpQuantity : InterestRatePayout -> Optional ContractualQuantity
    getIrpQuantity irp = irp.quantity

    getCdpQuantity : ProtectionTerms -> ContractualQuantity
    getCdpQuantity pTerms =
      ContractualQuantity
        { futureValueNotional = None
        , fxLinkedNotional = None
        , notionalAmount = None
        , notionalSchedule = Some NotionalSchedule
            { id = None
            , notionalStepSchedule = NonNegativeAmountSchedule
                { id = None
                , currency = pTerms.notionalAmount.currency
                , initialValue = pTerms.notionalAmount.amount
                , step = []
                }
            , notionalStepParameters = None
            }
        , quantity = None
        , notionalReset = None
        , notionalAdjustments = None
        }

-- | Set ContractualQuantity in Contract
setContractualQuantity : [ContractualQuantity] -> Contract -> Contract
setContractualQuantity qc _ | L.length qc > 1= throwNotSupportedError "non-unique quantity"
setContractualQuantity qc contract =
  let payout = checkPayout contract.contractualProduct.economicTerms.payout
      qcSingle = getOne "quantity" qc

      payoutCdp =
        case payout.creditDefaultPayout of
          None -> payout
          Some cdp ->
            let notionalSchedule = get "notionalSchedule" qcSingle.notionalSchedule
                notionalAmountNew = Money
                                      { id = None
                                      , currency = notionalSchedule.notionalStepSchedule.currency
                                      , amount = notionalSchedule.notionalStepSchedule.initialValue
                                      }
                cdpNew = cdp { protectionTerms = map (setCdpQuantity notionalAmountNew) cdp.protectionTerms }
            in payout { creditDefaultPayout = Some cdpNew }

      payoutIrp = payout { interestRatePayout = map (setIrpQuantity qcSingle) payout.interestRatePayout }

      economicTermsNew = contract.contractualProduct.economicTerms { payout = payoutIrp }
      contractualProductNew = contract.contractualProduct { economicTerms = economicTermsNew }
  in contract { contractualProduct = contractualProductNew }

  where
    setCdpQuantity : Money -> ProtectionTerms -> ProtectionTerms
    setCdpQuantity notionalAmount pTerms = pTerms { notionalAmount }

    setIrpQuantity : ContractualQuantity -> InterestRatePayout -> InterestRatePayout
    setIrpQuantity quantity irp = irp { quantity = Some quantity }
