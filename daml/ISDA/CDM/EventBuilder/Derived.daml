daml 1.2
module ISDA.CDM.EventBuilder.Derived where

import DA.List as L
import ISDA.CDM.Impl.Contract.Contract as Contract
import ISDA.CDM.Impl.Identifier
import ISDA.CDM.Impl.Utils
import ISDA.CDM.Types.All

-- | Build derived events (e.g. interest rate payments, resets, etc.). Returns all events that
-- have not been applied yet. If the event is not fully known yet (e.g. an observation for a reset is not
-- available yet or a reset for a floating rate coupon), then an empty primitive is returned.
buildDerivedEvents : (Fetch f) => DerivedSpec -> f [Event]
buildDerivedEvents spec =
  map finalize <$> Contract.buildEvents spec.fromDate spec.toDate spec.pastEvents spec.contract

  where
    finalize : Event -> Event
    finalize event =
      let eventId = (get "eventQualifier" event.eventQualifier) <> "_" <> (show event.eventDate)
          eventIdentifier = map (suffixIdentifier eventId) spec.contract.contractIdentifier
          lineage = fmap (\l -> l { contractReference = [referenceWithEmptyMeta spec.contract.rosettaKey] }) event.lineage
          account = if L.length event.primitive.transfer > 0 then spec.contract.account else []
      in event
          { eventIdentifier = eventIdentifier
          , account = account
          , party = spec.contract.party
          , lineage = lineage
          }
