daml 1.2
module ISDA.CDM.EventBuilder.NewTrade where

import ISDA.CDM.Impl.Event.Event
import ISDA.CDM.Types.All

-- | Build NewTrade event
buildNewTradeEvent :  NewTradeSpec -> Event
buildNewTradeEvent spec =
  let primitive = emptyPrimitiveEvent
                    { inception = [ Inception { after = spec.after, before = [] } ]
                    , transfer = spec.base.transfer
                    }
      eventEffect = buildEventEffect primitive

  in Event
      { id = spec.base.id
      , rosettaKey = ""
      , account = spec.base.account
      , action = spec.base.action
      , effectiveDate = spec.base.effectiveDate
      , eventDate = spec.base.eventDate
      , eventEffect = Some eventEffect
      , eventIdentifier = spec.base.eventIdentifier
      , eventQualifier = Some "NewTrade"
      , functionCall = None
      , intent = None
      , lineage = None
      , messageInformation = spec.base.messageInformation
      , party = spec.after.contract.party
      , primitive = primitive
      , timestamp = spec.base.timestamp
      , eventWorkflow = None
      }
