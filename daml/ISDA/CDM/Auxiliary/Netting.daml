daml 1.2
module ISDA.CDM.Auxiliary.Netting where

import DA.List
import DA.Optional
import ISDA.CDM.Impl.Event.Transfer
import ISDA.CDM.Impl.Utils
import ISDA.CDM.Types.All

-- | Net a list of transfers on settlementType, settlementDate, status, and settlementReference whenever possible
netTransfers : [TransferPrimitive] -> [TransferPrimitive]
netTransfers (map checkTransferPrimitive -> transfers) = combineOn (\t -> (t.settlementType, t.settlementDate, t.status, t.settlementReference)) netImpl transfers

  where
    netImpl : [TransferPrimitive] -> TransferPrimitive
    netImpl transfers =
      let settlementType      = (head transfers).settlementType
          settlementDate      = (head transfers).settlementDate
          settlementReference = (head transfers).settlementReference
          status              = (head transfers).status

          cts = concatMap (\t -> t.cashTransfer) transfers
          nettedCts = combineBy key criteria netCashTransfers cts

      in TransferPrimitive
          { cashTransfer = nettedCts
          , commodityTransfer = []
          , identifier = None
          , rosettaKey = ""
          , securityTransfer = []
          , settlementDate = settlementDate
          , settlementReference = settlementReference
          , settlementType = settlementType
          , status = status
          }

    key : CashTransferComponent -> (Text, PayerReceiver)
    key ct = (ct.amount.currency.value, ct.payerReceiver)

    criteria : (Text, PayerReceiver) -> (Text, PayerReceiver) -> Bool
    criteria (c1, pr1) (c2, pr2) =
      c1 == c2 &&
      (pr1.payerPartyReference == pr2.payerPartyReference || pr1.payerPartyReference == pr2.receiverPartyReference) &&
      (pr1.receiverPartyReference == pr2.receiverPartyReference || pr1.receiverPartyReference == pr2.payerPartyReference) &&
      (pr1.payerAccountReference == pr2.payerAccountReference || pr1.payerAccountReference == pr2.receiverAccountReference) &&
      (pr1.receiverAccountReference == pr2.receiverAccountReference || pr1.receiverAccountReference == pr2.payerAccountReference)

    -- Net cash transfers
    netCashTransfers : [CashTransferComponent] -> CashTransferComponent
    netCashTransfers [] = error "expecting at least one cash transfer"
    netCashTransfers [ct] = ct
    netCashTransfers cts =
      let breakdown = map buildBreakDown cts
          cashflowType = getType $ map (\ct -> ct.cashflowType) cts
          (payerReceiver, amount) = foldl1 netImpl $ zip (map (\ct -> ct.payerReceiver) cts) (map (\ct -> ct.amount) cts)
      in CashTransferComponent
          { payerReceiver = payerReceiver
          , amount = amount
          , cashflowType = cashflowType
          , breakdown = breakdown
          , identifier = None
          , transferCalculation = None
          }

      where
        buildBreakDown : CashTransferComponent -> CashTransferBreakdown
        buildBreakDown ctc = CashTransferBreakdown
                              { amount = ctc.amount
                              , cashflowType = ctc.cashflowType
                              , identifier = ctc.identifier
                              , lineage = []
                              , payerReceiver = ctc.payerReceiver
                              , transferCalculation = ctc.transferCalculation
                              }

        getType : [Optional CashflowTypeEnum] -> Optional CashflowTypeEnum
        getType types
          | catOptionals types == [] = None
          | dedup types == [Some CashflowTypeEnum_Interest] = Some CashflowTypeEnum_NetInterest
          | otherwise =
              case dedup types of
                [Some t] -> Some t
                _        -> None

        netImpl : (PayerReceiver, Money) -> (PayerReceiver, Money) -> (PayerReceiver, Money)
        netImpl (pr1, a1) (pr2, a2)
          | (pr1.payerAccountReference /= pr2.payerAccountReference) && (pr1.payerAccountReference /= pr2.receiverAccountReference) ||
            (pr1.receiverAccountReference /= pr2.receiverAccountReference) && (pr1.receiverAccountReference /= pr2.payerAccountReference) =
              error "cannot combine cash transfers made to different accounts"

          | (pr1.payerPartyReference /= pr2.payerPartyReference) && (pr1.payerPartyReference /= pr2.receiverPartyReference) ||
            (pr1.receiverPartyReference /= pr2.receiverPartyReference) && (pr1.receiverPartyReference /= pr2.payerPartyReference) =
              error "cannot combine cash transfers involving different parties"

          | (a1.currency /= a2.currency) =
              error "cannot combine cash transfers with different currencies"

          | otherwise =
              let (pr1N, a1N) = normalize (pr1, a1)
                  (pr2N, a2N) = normalize (pr2, a2)
                  amount = Money
                            { id = None
                            , currency = a1.currency
                            , amount = if (pr1N.payerPartyReference == pr2N.payerPartyReference) then a1N.amount + a2N.amount else a1N.amount - a2N.amount
                            }
              in normalize (pr1N, amount)

              where
                normalize : (PayerReceiver, Money) -> (PayerReceiver, Money)
                normalize (pr, a)
                  | a.amount >= 0.0 = (pr, a)
                  | a.amount < 0.0 =
                      let prNew = PayerReceiver
                                    { payerAccountReference     = pr.receiverAccountReference
                                    , receiverAccountReference  = pr.payerAccountReference
                                    , payerPartyReference       = pr.receiverPartyReference
                                    , receiverPartyReference    = pr.payerPartyReference
                                    }
                          amountNew = -(a.amount)
                      in (prNew, a { amount = amountNew })
