daml 1.2
module ISDA.CDM.Impl.Date.AdjustableOrRelativeDate where

import DA.Optional
import ISDA.CDM.Impl.Date.AdjustableDate as AD
import ISDA.CDM.Impl.Utils
import ISDA.CDM.Types.All

-- | Check AdjustableOrRelativeDate for non-supported features
checkAdjustableOrRelativeDate : AdjustableOrRelativeDate -> AdjustableOrRelativeDate
checkAdjustableOrRelativeDate ar | isSome ar.relativeDate = throwNotSupportedError "AdjustableOrRelativeDate.relativeDate"
checkAdjustableOrRelativeDate ar = ar

-- | Get adjusted date from AdjustableOrRelativeDate
getAdjustedDate : (Fetch f) => AdjustableOrRelativeDate -> f Date
getAdjustedDate (checkAdjustableOrRelativeDate -> ar)
  | Some ad <- ar.adjustableDate = AD.getAdjustedDate ad
  | otherwise = error "either 'relativeDate' or 'adjustableDate' required for AdjustableOrRelativeDate"

-- | Get unadjusted date from AdjustableOrRelativeDate
getUnadjustedDate : AdjustableOrRelativeDate -> Date
getUnadjustedDate (checkAdjustableOrRelativeDate -> ar)
  | Some ad <- ar.adjustableDate = AD.getUnadjustedDate ad
  | otherwise = error "either 'relativeDate' or 'adjustableDate' required for AdjustableOrRelativeDate"

-- | AdjustableOrRelativeDate to AdjustableOrAdjustedOrRelativeDate
toAdjustableOrAdjustedOrRelativeDate : AdjustableOrRelativeDate -> AdjustableOrAdjustedOrRelativeDate
toAdjustableOrAdjustedOrRelativeDate (checkAdjustableOrRelativeDate -> ar)
  | Some (checkAdjustableDate -> ad) <- ar.adjustableDate = do
      AdjustableOrAdjustedOrRelativeDate
        { id = None
        , unadjustedDate =  Some ad.unadjustedDate
        , dateAdjustments = ad.dateAdjustments
        , adjustedDate = ad.adjustedDate
        , relativeDate = None
        }

  | otherwise = error "either 'relativeDate' or 'adjustableDate' required for AdjustableOrRelativeDate"
