daml 1.2
module ISDA.CDM.Impl.Contract.Payout.InterestRatePayout.Schedule.PaymentDates
  ( generatePaymentCalculationPeriods
  )  where

import DA.List
import DA.Optional
import ISDA.CDM.Impl.Contract.Payout.InterestRatePayout.Schedule.ResetDates
import ISDA.CDM.Impl.Date.BusinessDayAdjustments
import ISDA.CDM.Impl.Date.Offset
import ISDA.CDM.Impl.Utils
import ISDA.CDM.Types.All

-- | Check PaymentDates for non-supported features
checkPaymentDates : CalculationPeriodDates -> PaymentDates -> PaymentDates
checkPaymentDates _ pds | isSome pds.firstPaymentDate = throwNotSupportedError "PaymentDates.firstPaymentDate"
checkPaymentDates _ pds | isSome pds.lastPaymentDate = throwNotSupportedError "PaymentDates.lastPaymentDate"
checkPaymentDates _ pds | isSome pds.dateRelativeTo = throwNotSupportedError "PaymentDates.dateRelativeTo"
checkPaymentDates cpds pds | checkFrequency cpds pds = throwNotSupportedError "paymentFrequency not equal to calculationPeriodFrequency"
  where
    checkFrequency : CalculationPeriodDates -> PaymentDates -> Bool
    checkFrequency cpds pds =
      let pFrequency = get "paymentFrequency" pds.paymentFrequency
          cpFrequency = get "calculationPeriodFrequency" cpds.calculationPeriodFrequency
      in (pFrequency.period /= cpFrequency.period) && (pFrequency.periodMultiplier /= cpFrequency.periodMultiplier)
checkPaymentDates _ pds | checkPayRelativeTo pds = throwNotSupportedError "PaymentDates.payRelativeTo not equal to 'PayRelativeToEnum_CalculationPeriodStartDate' or 'PayRelativeToEnum_CalculationPeriodEndDate'"
  where
    checkPayRelativeTo : PaymentDates -> Bool
    checkPayRelativeTo pds | (get "payRelativeTo" pds.payRelativeTo) == PayRelativeToEnum_CalculationPeriodStartDate = False
    checkPayRelativeTo pds | (get "payRelativeTo" pds.payRelativeTo) == PayRelativeToEnum_CalculationPeriodEndDate = False
    checkPayRelativeTo pds = True
checkPaymentDates _ pds = pds

-- | Generate PaymentCalculationPeriod from CalculationPeriodDates, ResetDates, and PaymentDates
generatePaymentCalculationPeriods : (Fetch f) => CalculationPeriodDates -> Optional ResetDates -> Optional PaymentDates -> f [PaymentCalculationPeriod]
generatePaymentCalculationPeriods cpds rds (fmap (checkPaymentDates cpds) -> pds) = do
  -- Roll out calculation periods
  cps <- generateResetPeriods cpds rds

  -- Define payment calculation period
  let adj = optional noAdj (\x -> get "paymentDatesAdjustments" x.paymentDatesAdjustments) pds
  let payRelativeTo = optional PayRelativeToEnum_CalculationPeriodEndDate (\x -> get "payRelativeTo" x.payRelativeTo) pds
  let offset = (\x -> x.paymentDaysOffset) =<< pds
  mapA (generateSinglePeriod payRelativeTo offset adj . replicate 1) cps

  where
    noAdj = BusinessDayAdjustments
              { id = None
              , businessCenters = None
              , businessDayConvention = BusinessDayConventionEnum_NONE
              }

    generateSinglePeriod :
      (Fetch f)
      => PayRelativeToEnum
      -> Optional Offset
      -> BusinessDayAdjustments
      -> [CalculationPeriod]
      -> f PaymentCalculationPeriod
    generateSinglePeriod _ _ _ [] = error "expecting at least one calculation period"
    generateSinglePeriod payRelativeTo offset adj cps = do
      let baseDate = case payRelativeTo of
                      PayRelativeToEnum_CalculationPeriodStartDate ->
                        (get "adjustedStartDate" . (\cp -> cp.adjustedStartDate) . head) cps
                      PayRelativeToEnum_CalculationPeriodEndDate ->
                        (get "adjustedEndDate" . (\cp -> cp.adjustedEndDate) . last) $ cps

      uPayDate <- optional (pure baseDate) (\o -> applyOffset o adj.businessCenters baseDate) offset
      aPayDate <- adjustDate adj uPayDate
      return PaymentCalculationPeriod
                { id = None
                , adjustedPaymentDate = Some aPayDate
                , calculationPeriod = cps
                , discountFactor = None
                , fixedPaymentAmount = None
                , forecastPaymentAmount = None
                , presentValueAmount = None
                , unadjustedPaymentDate = Some uPayDate
                }
