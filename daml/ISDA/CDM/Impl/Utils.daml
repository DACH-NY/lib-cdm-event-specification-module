daml 1.2
module ISDA.CDM.Impl.Utils where

import DA.List
import DA.Optional
import ISDA.CDM.Types.All hiding (length)

fieldWithEmptyMeta : a -> FieldWithMeta a
fieldWithEmptyMeta v = FieldWithMeta
                        { value = v
                        , meta = emptyMeta
                        }

referenceWithEmptyMeta : Text -> ReferenceWithMeta a
referenceWithEmptyMeta ref = ReferenceWithMeta
                              { reference = Some ref
                              , value = None
                              , meta = emptyMeta
                              }

emptyMeta : MetaFields
emptyMeta = MetaFields { reference = None, scheme = None, id = None }

-- | Throw a not supported error
throwNotSupportedError : Text -> a
throwNotSupportedError msg = error $ "'" <> msg <> "' not supported yet"

-- | Fail if there is not exactly one element
getOne : Text -> [a] -> a
getOne _ (x::[]) = x
getOne field _ = error $ "expecting exactly one '" <> field <> "'"

-- | Get value that is expected to be set
get : Text -> Optional a -> a
get _ (Some x) = x
get field None = error $ "expecting '" <> field <> "' to be set"

-- | Fail if list is empty, otherwise return first element.
getFirst : Text -> [a] -> a
getFirst field [] = error $ "expecting at least one '" <> field <> "'"
getFirst _ (x::_) = x

-- | Fail if nth element does not exist, otherwise return it
nThTry : Text -> Int -> [a] -> a
nThTry msg i xs
  | i >= 0 && i < length xs = xs!!i
  | otherwise = error msg

-- | Fail if value is not set
fromSomeTry : Text -> Optional a -> a
fromSomeTry _ (Some x) = x
fromSomeTry msg None = error msg

-- | 'concatMap' with Calculation
concatMapC : (Fetch f) => (a -> f [b]) -> [a] -> f [b]
concatMapC f xs = concat <$> mapA f xs

-- | 'mapOptional' with Calculation
mapOptionalC : (Fetch f) => (a -> f (Optional b)) -> [a] -> f [b]
mapOptionalC f xs = catOptionals <$> mapA f xs

-- | Check if a date falls within a given window
fallsWithin : Optional Date -> Optional Date -> Date -> Bool
fallsWithin fromDate toDate date = date >= fromOptional date fromDate && date <= fromOptional date toDate

-- | Group on some extracted value and merge by applying a function
combineOn : (Ord k) => (a -> k) -> ([a] -> a) -> [a] -> [a]
combineOn f c xs = map c $ groupOn f $ sortOn f xs

-- | Group by key with a relation and merge elements by applying a function
combineBy : (Ord k) => (a -> k) -> (k -> k -> Bool) -> ([a] -> a) -> [a] -> [a]
combineBy f p c xs = map c $ groupBy (\x1 x2 -> p (f x1) (f x2)) $ sortOn f xs
